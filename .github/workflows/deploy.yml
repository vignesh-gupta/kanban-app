name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: kanban-backend
  FRONTEND_IMAGE_NAME: kanban-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      run: |
        # Copy docker-compose files to server
        scp -r ./docker-compose.production.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/kanban/
        scp -r ./nginx.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/kanban/
        
        # Deploy on server
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ~/kanban
          
          # Export environment variables
          export BACKEND_IMAGE="${{ needs.build-and-push.outputs.backend-image }}"
          export FRONTEND_IMAGE="${{ needs.build-and-push.outputs.frontend-image }}"
          export MONGODB_URI="${{ secrets.MONGODB_URI }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export REDIS_URL="${{ secrets.REDIS_URL }}"
          export RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}"
          export NODE_ENV="production"
          export FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          export BACKEND_URL="${{ secrets.BACKEND_URL }}"
          
          # Pull latest images
          docker compose -f docker-compose.production.yml pull
          
          # Stop and remove old containers
          docker compose -f docker-compose.production.yml down
          
          # Start new containers
          docker compose -f docker-compose.production.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Check if services are running
          sleep 10
          docker compose -f docker-compose.production.yml ps
        EOF
        
    - name: Health check
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Check if backend is healthy
        for i in {1..5}; do
          if curl -f "${{ secrets.BACKEND_URL }}/health" || curl -f "${{ secrets.BACKEND_URL }}/api/health"; then
            echo "Backend is healthy"
            break
          fi
          echo "Backend health check failed, attempt $i/5"
          sleep 10
        done
        
        # Check if frontend is accessible
        for i in {1..5}; do
          if curl -f "${{ secrets.FRONTEND_URL }}"; then
            echo "Frontend is accessible"
            break
          fi
          echo "Frontend health check failed, attempt $i/5"
          sleep 10
        done
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
          # Add notification logic here (Slack, Discord, etc.)
        else
          echo "❌ Deployment failed!"
          # Add notification logic here (Slack, Discord, etc.)
        fi

  rollback:
    if: failure()
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Rollback deployment
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ~/kanban
          
          # Get the previous successful deployment
          PREVIOUS_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep kanban-backend | grep -v latest | head -2 | tail -1 | cut -d: -f2)
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Rolling back to tag: $PREVIOUS_TAG"
            
            export BACKEND_IMAGE="kanban-backend:$PREVIOUS_TAG"
            export FRONTEND_IMAGE="kanban-frontend:$PREVIOUS_TAG"
            
            docker compose -f docker-compose.production.yml down
            docker compose -f docker-compose.production.yml up -d
            
            echo "Rollback completed"
          else
            echo "No previous version found for rollback"
          fi
        EOF
